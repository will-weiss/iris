{{! Set initial cursor}}
{{#linestart}}cursor = indentation;{{/linestart}}
{{#text}}cursor = {{{text}}};{{/text}}
{{^linestart}}{{^text}}
  cursor = {{#path.keys.length}}context{{/path.keys.length}}{{^path.keys.length}}data{{/path.keys.length}};
{{/text}}{{/linestart}}

{{#path.keys}}
  cursor = cursor && cursor["{{{.}}}"];
{{/path.keys}}

{{#variable}}
  cursor = cursor == null ? "" : "" + cursor;
  {{#escaped}}
    cursor = cursor.replace("&", "&amp;").replace('"', "&quot;").replace("<", "&lt;").replace(">", "&gt;");
  {{/escaped}}
{{/variable}}

{{#partial}}
  cursor = typeof {{{name}}} !== "function"
    ? ""
    : {{{name}}}(cursor, "{{{indentation}}}");
{{/partial}}

{{! Use cursor}}
{{^section}}
  {{{addToResultLeft}}}cursor{{{addToResultRight}}};
{{/section}}


{{#section}}
  {{^inverted}}
    if (cursor) {
      (Array.isArray(cursor) ? cursor : [cursor]).forEach(function(data) {
        var cursor;
        var context = data && typeof data === 'object' ? Object.assign(Object.create(this), data) : this;
        {{#nodes}}
          {{> node}}
        {{/nodes}}
      }, context);
    }
  {{/inverted}}
  {{#inverted}}
    if (!cursor || cursor.length === 0) {
      {{#nodes}}
        {{> node}}
      {{/nodes}}
    }
  {{/inverted}}
{{/section}}