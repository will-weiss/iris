{{! Set cursor based on the node type }}

cursor =

  {{#linestart}}
    indentation
  {{/linestart}}

  {{#text}}
    {{{text}}}
  {{/text}}

  {{#newline}}
    "\n"
  {{/newline}}

  {{#partial}}
    typeof {{{name}}} !== "function"
      ? ""
      : {{{name}}}(data, "{{{indentation}}}")
  {{/partial}}

  {{#path}}
    {{^keys}}
      data
    {{/keys}}
    {{#keys.length}}
      context
    {{/keys.length}}
    {{#keys}}
      , cursor = cursor && cursor["{{{.}}}"]
    {{/keys}}
    {{#variable}}
      , cursor = cursor == null ? "" : "" + cursor
      {{#escaped}}
        , cursor = cursor.replace("&", "&amp;").replace('"', "&quot;").replace("<", "&lt;").replace(">", "&gt;")
      {{/escaped}}
    {{/variable}}
  {{/path}}
;

{{! Use cursor}}
{{^section}}
  {{{addToResultLeft}}}cursor{{{addToResultRight}}};
{{/section}}

{{#section}}
  {{^inverted}}
    if (cursor) {
      (Array.isArray(cursor) ? cursor : [cursor]).forEach(function(data) {
        var cursor;
        var context = data && typeof data === 'object' ? Object.assign(Object.create(this), data) : this;
        {{#nodes}}
          {{> node}}
        {{/nodes}}
      }, context);
    }
  {{/inverted}}

  {{#inverted}}
    if (!cursor || cursor.length === 0) {
      {{#nodes}}
        {{> node}}
      {{/nodes}}
    }
  {{/inverted}}
{{/section}}